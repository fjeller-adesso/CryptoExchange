// <auto-generated />
using System;
using CryptoExchange.Data.PostgreSql.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CryptoExchange.Data.PostgreSql.Migrations
{
    [DbContext(typeof(CryptoDataContext))]
    partial class CryptoDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("order_books")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CryptoExchange.Data.PostgreSql.DataAccess.Entities.ExchangeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AvailableCrypto")
                        .HasColumnType("numeric")
                        .HasColumnName("available_crypto");

                    b.Property<decimal>("AvailableEuro")
                        .HasColumnType("numeric")
                        .HasColumnName("available_euro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("exchange_pkey");

                    b.ToTable("exchange", "order_books");
                });

            modelBuilder.Entity("CryptoExchange.Data.PostgreSql.DataAccess.Entities.ExchangeOrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("uuid")
                        .HasColumnName("exchange_id");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("kind");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("exchange_order_pkey");

                    b.HasIndex(new[] { "ExchangeId" }, "fki_orders_exchanges");

                    b.ToTable("exchange_order", "order_books");
                });

            modelBuilder.Entity("CryptoExchange.Data.PostgreSql.DataAccess.Entities.ExchangeOrderEntity", b =>
                {
                    b.HasOne("CryptoExchange.Data.PostgreSql.DataAccess.Entities.ExchangeEntity", "Exchange")
                        .WithMany("ExchangeOrders")
                        .HasForeignKey("ExchangeId")
                        .IsRequired()
                        .HasConstraintName("orders_exchanges");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("CryptoExchange.Data.PostgreSql.DataAccess.Entities.ExchangeEntity", b =>
                {
                    b.Navigation("ExchangeOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
